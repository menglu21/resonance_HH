--- jetmetUncertainties.py	2023-10-21 23:18:31.000000001 +0200
+++ /afs/cern.ch/user/m/melu/work/HH/CMSSW_10_6_29_old/src/PhysicsTools/NanoAODTools/python/postprocessing/modules/jme/jetmetUncertainties.py	2023-07-05 22:42:55.000000001 +0200
@@ -83,8 +83,10 @@
                                      self.jerUncertaintyInputFileName)
 
         if "AK4" in jetType:
-            self.jetBranchName = "Jet"
-            self.genJetBranchName = "GenJet"
+            self.jetBranchName = "JetNoVlep"
+            self.genJetBranchName = "GenJetNoVlep"
+            #self.jetBranchName = "Jet"
+            #self.genJetBranchName = "GenJet"
             self.genSubJetBranchName = None
         else:
             raise ValueError("ERROR: Invalid jet type = '%s'!" % jetType)
@@ -485,13 +487,23 @@
             jet.mass = jet_mass
 
             # Get the JEC factors
-            jec = jet_pt / jet_rawpt
-            jecL1 = jet_pt_l1 / jet_rawpt
+            # to avoid jet_rawpt=0
+            if jet_rawpt>0:
+                jec = jet_pt / jet_rawpt
+                jecL1 = jet_pt_l1 / jet_rawpt
+            else:
+                jec = 1
+                jecL1 = 1
+
             if self.jetReCalibratorProd:
-                jecProd = (
-                    self.jetReCalibratorProd.correct(jet, rho)[0] / jet_rawpt)
-                jecL1Prod = (
-                    self.jetReCalibratorProdL1.correct(jet, rho)[0] / jet_rawpt)
+                if jet_rawpt>0:
+                    jecProd = (
+                        self.jetReCalibratorProd.correct(jet, rho)[0] / jet_rawpt)
+                    jecL1Prod = (
+                        self.jetReCalibratorProdL1.correct(jet, rho)[0] / jet_rawpt)
+                else:
+                    jecProd=1.
+                    jecL1Prod=1.
 
             if not self.isData:
                 genJet = pairs[jet]
@@ -591,7 +603,10 @@
                 jets_pt_nom.append(jet_pt_nom)
                 jets_mass_raw.append(jet_rawmass)
                 jets_mass_nom.append(jet_mass_nom)
-                jets_corr_JEC.append(jet_pt / jet_rawpt)
+                if jet_rawpt>0:
+                    jets_corr_JEC.append(jet_pt / jet_rawpt)
+                else:
+                    jets_corr_JEC.append(1.)
                 # can be used to undo JER
                 jets_corr_JER.append(jet_pt_jerNomVal)
 
